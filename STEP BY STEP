##由於Perl的語法非常活潑，使得程式在維護時特別棘手，因此寫註解成為一項很重要的工作。 
我建議你最好在每個副程式前面加上對這段副程式的描述，特別是需要傳遞的參數要註明清楚

小結:
a.若已經是一行行就可以先考慮用grep+AWK
b.grep 是找出某些分類好的行才用 其它建議不要用
c.awk 是只要選某些欄位,也就是對稱的狀態要只選某些欄位留下可以使用

思考此狀況是適用嗎
1001  a  b  d   12  13  45
1002  c  d  e   22  11
1003  d  f  g   12  34  56 
1001  d  g  h   33  45  
1005  f  h  i   11  12  45
1001  f  f  k   34  34
1002  e  r  l   11  44  66

要變成
1001  12  13  45 33  45 34  34
1002  22  11  11  44  66
1003  12  34  56 
1005  11  12  45



##前言
perl 跟python Java 等語言個人覺得沒有不同;最大好處在於不用編譯之外
0.但以簡單有規則文字處理linux 指令才是最強的以grep+awk 就非常強!!
1.比對字符不用寫迴圈
2.對於搜尋也是不用寫迴圈且可以有指定與取代功能
3.對於結果處理可以升等到CGI等級
4.跟bash sell 一樣銜接檔案管理這就優於python 與java
5.結論若只是怕寫迴圈與程式簡單的系統用perl乾淨許多.
6.結論2但是若真的要寫成系統其實python與java還是都可以做.
7.結論3所以管理系統檔案用bash shell 或perl ;檔案管理直用指令;簡單ETL用perl ;ETL連接系統還是用python或java
8.但是bash shell 可以直接寫 grep awk 不須轉換語法在簡單文字與檔案管理還是 勝過perl 只是沒辦法有完整的系統程式功能如java或python

##Reference
http://ind.ntou.edu.tw/~dada/cgi/Perlsynx.htm
http://irw.ncut.edu.tw/peterju/perl.html


#Esccape caracter important !!!!!!
$x="ls -l";
print "$x";             # Output ls -l
print "\$x";            # Output $x
print '$x';             # Output $x
print `$x`;             # Output files in this directory

#Fuxk  deserve variable and used meaning ex:$_ 
$_	The default input and pattern-searching space.
$digit	Contains the subpattern from a successful parentheses pattern match.
$.	The current input line number of last filehandle read.
$!	Contains the current value of errno.
$0	The name of the file of the Perl script.
@ARGV	The command line arguments issued when the script was started.
@_	The parameter array for subroutines.
%ENV	This associative array contains your current environment.

#special operate
~	Performs a 1s complement of the operator. This is a unary operator.
!=	Returns Ture if the two operands are not equal, False otherwise.
< = >	Returns -1 if the left operand is less than the right, +1 if is it greater than, and 0(False) otherwise.
&&	Performs a logical AND operation. If the left operand is True m then the right operator is not evaluated.
|	Returns the valueof the two operators bitwise ORed.
^	Returns the valueof the two operators bitwise XORed.
+=	Adds the value of the right-hand operand to the value of the left-hand operand.
-+	Subtracts the value of the right-hand operand to the value of the left-hand operand.
>>	Shifts the left operand right by the number of bits that is specified by the right operand.
<<	Shifts the left operand left by the number of bits that is specified by the right operand.


##LOOP

#For
compare three statment:
(A) for($i=0; $i<=10; $i++) {Code Segment}
(B) foreach $i (@array) {Code Segment}
(c) for $i (0..10) {Code Segment}

#While 
while($i<=10) {Code Segment}

#Do
do {Code Segment} while(Expression);

# Perl也有和C語言的break和continue一樣的指令，Perl叫它做 last 和 next (較口語化)。
# last是跳出現在所在的迴圈，next則是跳過下面的指令直接執行下一次的迴圈。
while(chomp($i=<STDIN>)) {
next if ($i == 5);
last unless ($i > 10);
}

#Open file    https://perldoc.perl.org/functions/open.html
open(my $fh, '<:encoding(UTF-8)', $filename)  若不爽用 <符號開檔會如何??

#Array 
(A)宣告
my @array;
(1)my @array=qw(a b c d);
(2)my @array=("a","b","c","d");以上(1)等於(2)

(B)增加元素
$array[0]="a"; $array[1]="b"; $array[2]="c"; $array[3]="d";

(C)拜訪
for($i=0; $i<=$#array; $i++) {
print "$array[$i]\n";
}

#Hash Array alike map
(A)define diction
my %hash=("i1","aaa","i2","bbb","i3","ccc");

(B)change diction
$hash{'i1'}="aaa"; $hash{'i2'}="bbb"; $hash{'i3'}="ccc";

(C)拜訪diction by key& by value
foreach $key (keys %hash) {
print "$hash{$key}\n";
}
foreach $value (values %hash)
while(($key,$value)=each %hash)

## Filter and custom filter fumula
(A)m//gimosx
m命令可以讓你自訂pattern的分隔符號，而gimosx則是它的修飾選項
($host, $port, $file)=($url=~m|http://([^/:]+):{0,1}(\d*)(\S*)$|);
if $url="my.machine.tw:8080/cgi-bin/test.pl";
then ($host, $port, $file)=($1, $2, $3)
即$host="my.machine.tw"  =====> ([^/:]+)
$port=8080               =====> :{0,1}(\d*)
$file="/cgi-bin/test.pl" =====> (\S*)$

(B)s/PATTERN/REPLACEMENT/egimox  
egimox 其中分別為
e	Evaluate the right side as an expression.
g	Replace globally, i.e. all occurrences.
i	Do case-insensitive pattern matching.
m	Treat string as multiple lines.
o	Only compile pattern once.
s	Treat string as single line.
x	Use extended regular expressions.

$x =~ s/\s+//g
把所有的white space全部去除掉

$x =~ s/([^ ]*):*([^ ]*)/$2:$1/
把用":"分開的兩個欄位互相對調

$path =~ s|/usr/bin|/usr/local/bin|
它也可以讓你自訂分隔符號哦

(C)tr/SEARCHLIST/REPLACEMENTLIST/cds   這是也是取代的命令，和上一個不同的是SEARCHLIST和REPLACEMENTLIST只能是普通字串，而不是Regular Expression
$x =~ tr/this/that/
把"this"替換成"that"

$x =~ tr/a-z/A-Z/
把小寫字母全部替換成大寫字母

$count = $x =~ tr/*/*/
計算$x中有幾個"*"

需求 第一題
     1.大寫變小寫 
     2.去掉所有奇怪符號
     3.不要數字
     4.
     高級處理 
     1.ed 2.es 3.ies 4.'s 5.
     
需求第二題
     1.某{shad01}才要或是更厲害的字符間隔
     2.
     
需求第三題
     將  0001  A,B,V
         0002  B,C
         0003  A,D
     變成 0001 A
          0001 B
          0001 V
          0002 B
          0002 C
          0003 A
          0003 D
          
##正則式  細部公式

(A) 數量filter
*	Matchs 0 or more times.
+	Matchs 1 or more times.
?	Matchs 0 or 1 times.
{n}	Matches exactly n times.
{n,}	Matches at least n times.
{n,m}	Matches at least n times but no more than m times.

 
(A) 特殊字元 filter
\	Tells Perl to accept the following characters as a regular character; this removes special meanings from any metacharacter.
^	Matches the beginning of the string, unless /m is used.
.	Matches any character except a new line character, unless /s is used.
$	Matches the end of the string, unless /m is used.
|	Expresses alternation. This means the expressions will search for multiple patterns in the same string.
( )	Groups expressions to assist in alternation and back referencing.
[ ]	Looks for a set of characters.

(C) 常用字元 filter
r	Carriage return(CR), ASCII 13(十進位)
\n	New line, UNIX中代表ASCII 10(十進位), DOS(Windows)系統中則是ASCII 13 + ASCII 10(十進位).
\t	Tab, ASCII 9(十進位)
\w	Matches an alphanumeric character. Alphanumeric also includes _. 即 [A-Za-z0-9_].
\W	Matches a nonalphanumeric character. 即 [^A-Za-z0-9_].
\s	Matches a white space character. This includes space, tab, FormFeed and CR/LF. 即 [\ \t\f\r\n].
\S	Matches a non-whote space character. 即 [^\ \t\f\r\n].
\d	Matches a digit. 即 [0-9].
\D	Matches a nondigit character. 即 [^0-9].
\b	Matches a word boundary.
\B	Matches a nonword boundary.
\033	octal char
\x1B	hex char

(D) filer 範例
/abc/
找到含有abc的字串
/^abc/
找到開頭是abc的字串
/abc$/
找到結尾是abc的字串
/a|b/
找到有a或b的字串，也可以用來找整個字(word)
/ab{2,4}c/
找到a後面跟著2-4個b，再跟著c的字串，若只有/ab{2,}c/則會找二個以上的b
/ab*c/
找到a後面跟著0個或多個b，再跟著c的字串，如同/ab{0,}c/
/ab+c/
找到a後面跟著一個以上的b，再跟著c的字串，如同/ab{1,}c/
/a.c/
.可以代表任何字元，除了new line字元(\n)外。
/[abc]/
找到含有這三個字元中任何一個的字串
/\d/
找到含有數字的字串，如同/[0-9]/
/\w/
找到含有字母的字串，如同/[a-zA-Z0-9_]/
/\s/
找到含有white space的字串，如同/[ \t\r\n\f]/
/[^abc]/
找到沒有abc任一字元的字串
/\*/
找到含有字元*的字串，在反斜線"\"後面的字元Perl會把它當作普通字元看待。若你不確定這個符號是否為特殊字元，乾脆全加上\以策安全。
/abc/i
忽略abc的大小寫
/(\d+)\.(\d+)\.(\d+)\.(\d+)/
找到類似IP的字串，並將IP的四個數字分別存在$1,$2,$3,$4四個特殊變數中，以便在其後加以利用。例：
if ($x =~ /(\d+\.\d+)\.\d+\.\d+/) {
print "海洋大學" if ($1 eq "140.121");
}


#substing

##split

##grep        
          
##AWK  warning it is not use awk in perl;if you must use it in perl use "a2p"!! 

##cut  waning it is not use in perl ;perl use split funciton!!
          
 cut -d ":" -f 1,6- /etc/passwd 
## sed warning it is also no use in perl ;if you muat use it in perl use "s2p" dunction!!
建議直接與AWK 搭配 淘汰SED !!

## SUPER COMPARE WITH PYTHON GREAT ~~
cat "$filename"  | with open("$filename",'r') as fin:        | Read the file Sequentially
                 |     for line in fin:                      |   
-----------------------------------------------------------------------------------
grep 'something' | import re                                 | The python version returns
                 | line = re.findall(r'something', line)[0]  | a list of matches. We are only
                 |                                           | interested in the zero group
-----------------------------------------------------------------------------------
cut -d'"' -f2    | line = line.split('"')[1]                 | Splits the string and selects
                 |                                           | the second field (which is
                 |                                           | index 1 in python)
         
        

